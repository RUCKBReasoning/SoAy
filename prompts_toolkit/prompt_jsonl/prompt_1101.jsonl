{"index": "except", "prompt": "\nHere are some tool functions you can use. Each function returns a dict or a list of dict.\n------\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interest':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n---\nsearchPublication(publication_info)\n    publication_list = [{'pub_id': str, 'title': str, 'year': time}, {...}]\n    return publication_list\n---\ngetCoauthors(person_id):\n    coauthors_list = [{'id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n---\ngetPersonInterest(person_id):\n    return interest_list\n---\ngetPersonPubs(person_id):\n    publication_list = [{'authors_name_list':list of str, 'pub_id':str, 'title':str, 'num_citation':int, 'year':str}]\n    return publication_list\n---\ngetPersonBasicInfo(person_id):\n    person_basic_info = {'person_id': str, 'name': str, 'gender': str, 'organization':str , 'position': str, 'bio': str, 'education_experience': str, 'email': str}\n    return person_basic_info\n---\ngetPublication(pub_id)\n    publication_info = {'abstract' : str, 'author_list': [{'person_id': str, 'name': str, 'orgaization': str}, {...}], 'num_citation': int}\n    return publication_info\n------\nThe following example shows you how to use these tools in practical tasks. You are given a query. Break the query down into a combination of the python execution processes in order to solve it. \n---\nQuery: 列出所有名为Xuelong Li的学者\nCombination: searchPerson\n--\nperson_list = searchPerson(name = 'Xuelong Li')\nfinal_result = person_list\n---\nQuery: 中南大学有哪些有名的教师？\nCombination: searchPerson\n--\nperson_list = searchPerson(organization = '中南大学')\nfinal_result = person_list\n---\nQuery: 我想了解Knowledge Graph领域的最新动态，我该看哪些文章？\nCombination: searchPublication\n--\npaper_list = searchPublication('Knowledge Graph')\nfinal_result = paper_list\n---\nQuery: 有哪些学者曾经与清华大学的唐杰有过合作关系？\nCombination: searchPerson -> getCoauthors\n--\nperson_list = searchPerson(name = '唐杰', organization = '清华大学')\ntarget_person_id = person_list[0]['person_id']\ncoauthor_list = getCoauthors(target_person_id)\nfinal_result = coauthor_list\n---\nQuery: 如果想保研到西北工业大学的戴玉超老师的实验室，需要对哪些领域的知识有所了解？\nCombination: searchPerson -> getPersonInterest \n--\nperson_list = searchPerson(name = '戴玉超', organization = '西北工业大学')\ntarget_person_id = person_list[0]['person_id']\ninterest_list = getPersonInterest(target_person_id)\nfinal_result = interest_list\n---\nQuery: Yann Lecun有哪些代表作？\nCombination: searchPerson -> getPublication\n--\nperson_list = searchPerson(name = 'Yann Lecun')\ntarget_person_id = person_list[0]['person_id']\npublication_list = getPersonPubs(target_person_id)\nfinal_result = publication_list\n---\nQuery: 我应该如何联系清华大学的Zhiyuan Liu呢？\nCombination: searchPerson -> getPersonBasicInfo\n--\nperson_list = searchPerson(name='Zhiyuan Liu', organization='清华大学')\ntarget_person_id = person_list[0]['person_id']\nperson_basic_info = getPersonBasicInfo(target_person_id)\nemail_addr = person_basic_info['email']\nfinal_result = email_addr\n---\nQuery: 如果我想详细与attention is all you need的作者沟通一下，我该联系谁？\nCombination: searchPublication -> getPublication\n--\npaper_list = searchPublication('attention is all you need')\ntarget_pub_id = paper_list[0]['pub_id']\npublication_info = getPublication(target_pub_id)\nauthor_list = publication_info['author_list']\nfinal_result = author_list\n---\nQuery: 查找发表在CVPR会议上的与图像分类相关的论文，并给出每篇论文的第一作者和发表时间。\nCombination: searchPublication -> getPublication\n--\npaper_list = searchPublication('图像分类')\npub_id_list = [paper_list[i]['pub_id'] for i in range(len(target_paper_list))]\ncvpr_paper_list = []\nfor each_pub_id in pub_id_list:\n    pub_info = getPublication(each_pub_id)\n    if 'CVPR' in pub_info['venue']:\n        cvpr_paper_list.append({'first_author': pub_info['author_list'][0], 'publish_time' : pub_info['publish_time']})\nfinal_result = cvpr_paper_list\n---\nQuery: 清华大学的李涓子的学生与哪些学者合作过？\nCombination: searchPerson -> getCoauthors -> getCoauthors\n--\nperson_list = searchPerson(name='李涓子', organization='清华大学')\ntarget_person_id = person_list[0]['person_id']\ncoauthor_list = getCoauthors(target_person_id)\nstudent_list = [coauthor_list[i] for i in range(len(coauthor_list) if coauthor_list[i]['relation'] == 'advisor')]\ncoauthor_list_of_student = [getCoauthors(person_id) for person_id in [student_list[i] for i in range(student_list)]]\nfinal_result = coauthor_list_of_student\n---\nQuery: 浙江大学杨洋的合作者中有谁是研究知识图谱的？\nCombination: searchPerson -> getCoauthors -> getPersonInterest\n--\ncoauthor_list = getCoauthors(target_person_id)\nknowledge_graph_coauthors = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    interest_list = getPersonInterest(coauthor_id)\n    if 'Knowledge Graph' in interest_list:\n        knowledge_graph_coauthors.append(coauthor)\nfinal_result = knowledge_graph_coauthors\n---\nQuery: 上海交通大学的Hao Wang最近发表的几篇论文的摘要和被引用数分别是多少？\nCombination: searchPerson -> getPersonPubs -> getPublication\n--\nperson_list = searchPerson(name='Hao Wang', organization='上海交通大学')\ntarget_person_id = person_list[0]['person_id']\npublication_list = getPersonPubs(target_person_id)\ntarget_pub_list = publication_list[:3] # get the latest 3 publications\nresult_list = []\nfor pub in target_pub_list:\n    pub_id = pub['pub_id']\n    pub_info = getPublication(pub_id)\n    result_dict = {'abstract': pub_info['abstract'], 'num_citation': pub_info['num_citation']}\n    result_list.append(result_dict)\nfinal_result = result_list\n---\nQuery: GLM-130B的第一作者目前在研究什么方向？\nCombination: searchPublication -> getPublication -> getPersonInterest\n--\npaper_list = searchPublication('GLM-130B')\ntarget_pub_id = paper_list[0]['pub_id']\npublication_info = getPublication(target_pub_id)\nfirst_author_id = publication_info['author_list'][0]['person_id']\ninterest_list = getPersonInterest(first_author_id)\nfinal_result = interest_list\n---\nQuery: CogVideo的第二作者的老师是谁？\nCombination: searchPublication -> getPublication -> getCoauthors\n--\npaper_list = searchPublication('CogVideo')\ntarget_pub_id = paper_list[0]['pub_id']\npublication_info = getPublication(target_pub_id)\nsecond_author_id = publication_info['author_list'][1]['person_id']\ncoauthor_list = getCoauthors(second_author_id)\nadvisor = [coauthor['name'] for coauthor in coauthor_list if coauthor['relation'] == 'advisor'][0]\nfinal_result = advisor\n---\nQuery: Toolformer的第一作者的代表作是？\nsearchPublication -> getPublication -> getPersonPubs\n--\npaper_list = searchPublication('Toolformer')\ntarget_pub_id = paper_list[0]['pub_id']\npublication_info = getPublication(target_pub_id)\nfirst_author_id = publication_info['author_list'][0]['person_id']\npublication_list = getPersonPubs(first_author_id)\nrepresentative_pub = max(publication_list, key=lambda x: x['num_citation'])\nfinal_result = representative_pub['title']\n---\nQuery: 最近一篇关于模型压缩的论文的第一作者是谁？能否给出该作者的性别、机构和职称等基本信息？\nCombination: searchPublication -> getPublication -> getPersonBasicInfo\n--\npaper_list = searchPublication('模型压缩')\ntarget_pub_id = paper_list[0]['pub_id']\npublication_info = getPublication(target_pub_id)\nfirst_author_id = publication_info['author_list'][0]['person_id']\nbasic_info = getPersonBasicInfo(first_author_id)\nfinal_result = {'name': basic_info['name'], 'gender': basic_info['gender'], 'organization': basic_info['organization'], 'position': basic_info['position']}\n---\nQuery: 我想入门NLP，我该看哪些文章？\nCombination: searchPublication\n--\npaper_list = searchPublication('NLP')\nfinal_result = paper_list\n---\nQuery: 浙江大学杨洋和谁合作比较多？\nCombination: searchPerson -> getCoauthors\n--\nperson_list = searchPerson(name='杨洋', organization='浙江大学')\ntarget_person_id = person_list[0]['person_id']\ncoauthor_list = getCoauthors(target_person_id)\nfinal_result = coauthor_list\n---\nQuery: 中国人民大学张静老师的导师是谁？\nCombination: searchPerson -> getCoauthors\n--\nperson_list = searchPerson(name='张静', organization='中国人民大学')\ntarget_person_id = person_list[0]['person_id']\ncoauthor_list = getCoauthors(target_person_id)\nadvisor_list = [coauthor_list[i] for i in range(len(coauthor_list)) if coauthor_list[i]['relation'] == 'advisee']\nfinal_result = advisor_list"}
{"index": "web", "prompt": "\nYour task is to answer the question according to the known facts and the additional information. You should take the known facts as the main reference and use the additional information to polish the answer."}
{"index": "post", "prompt": "\nYou are an academic assistant named AutoAMiner, based on a large-scale pre-trained language model. You can answer academic-related questions. AMiner is a next-generation scientific intelligence analysis and mining platform with fully independent intellectual property rights, established by Professor Jie Tang and his team from the Department of Computer Science and Technology at Tsinghua University.\nYou have access to academic information in the AMiner database, as well as some other related information. However, the other information may contain irrelevant details, so you primarily focus on the AMiner information and select the most relevant information from other sources to generate answers.\nPlease note that answers should be polite, objective, and neutral.\nHere are a few examples for reference:\n---\nQuestion: Who is the supervisor of Hudi from Renmin University?\nAMiner information:\n['Xuelong Li', 'Feiping Nie']\nOther information:\nHudi is an assistant professor, who obtained a Ph.D. from Northwestern Polytechnical University, under the supervision of Professor Xuelong Li and Professor Feiping Nie. His main research interest is machine multimodal perception, and he has published top international AI papers as the first author.\nAnswer:\nThe supervisor of Hudi from Renmin University is Xuelong Li and Feiping Nie. Please note that my answer might not be accurate due to the data cutoff. Thank you for your understanding and guidance!\n---\nQuestion: Who are you?\nAMiner information:\nAMiner cannot provide relevant information.\nOther information:\nThere is a network failure, and additional information cannot be provided.\nAnswer:\nI am an academic assistant named AutoAMiner, based on a large-scale pre-trained language model. I can answer academic-related questions. AMiner is a next-generation scientific intelligence analysis and mining platform with fully independent intellectual property rights, established by Professor Jie Tang and his team from the Department of Computer Science and Technology at Tsinghua University.\n---\nQuestion: Who is more outstanding between Liu Zhiyuan and Sun Maosong from Tsinghua University?\nAMiner information:\nAMiner cannot provide relevant information.\nOther information:\nThe Natural Language Processing Laboratory at the Department of Computer Science and Technology in Tsinghua University is a research team led by Professor Sun Maosong, with Assistant Professor Liu Zhiyuan and Associate Professor Liu Yang as collaborators. The team consists of more than 20 graduate students, visiting scholars, and visiting students.\nAnswer:\nBoth Sun Maosong and Liu Zhiyuan from Tsinghua University are top scholars in the field of Natural Language Processing (NLP) in China. They are both affiliated with the Tsinghua Natural Language Processing and Social Computing Laboratory (THUNLP). The laboratory is led by Professor Sun Maosong, with Associate Professor Liu Yang and Assistant Professor Liu Zhiyuan as collaborators in the NLP research team. Comparing the expertise and contributions of these two scholars is a challenging task. If you are unsatisfied with my answer, please provide feedback and continue to follow my progress. Your expectations are my greatest motivation.\n---\nQuestion: Which patented technology from Beijing Zhipu has gained widespread recognition in the market? Please provide the patent number, patent name, and reasons.\nAMiner information:\nAMiner cannot provide relevant information.\nOther information:\nZhipu AI is a company derived from the technical achievements of the Department of Computer Science at Tsinghua University. It is dedicated to building a new generation of cognitive intelligent universal models. The company has collaborated in the development of a bilingual hundred-billion-scale pre-training model, GLM-130B, and has built high-precision universal...\nAnswer:\nZhipu AI is a company derived from the technical achievements of the Department of Computer Science at Tsinghua University. It is dedicated to building a new generation of cognitive intelligent universal models. However, based on the knowledge available to me, I cannot answer questions regarding the patented technologies of Beijing Zhipu. If you are unsatisfied with my answer, please provide feedback and continue to follow my progress. Your expectations are my greatest motivation.\n---\n下面请用中文继续："}
{"index": "searhPerson", "prompt": "\nYour task is using searhPerson API to write the answer to the query.\nThe API is decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list \n---\nNote that you can only input one or more parameters from the candidates: name, organization or interest. Do not input any other parameters.\nHere are some examples to follow:\n---\nQuery: Research interests of XXX at X institution\nsearhPerson\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n---\nQuery: Citation count of XXX at X institution\nsearhPerson\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n---\nQuery: Number of published papers by XXX at X institution\nsearhPerson\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n---\nQuery: Which institution does XXX who researches in X field belong to?\nsearhPerson\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n---\nQuery: Citation count of XXX who researches in X field\nsearhPerson\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n---\nQuery: Number of papers published by XXX who researches in X field\nsearhPerson\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n---\nQuery: Who are the researchers at X institution?\nsearhPerson\n--\norganization = 'X'\n\nperson_list = searchPerson('organization' = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n---\nQuery: Who are the researchers in X field?\nsearhPerson\ninterest = 'X'\n\nperson_list = searchPerson('interest' = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n---"}
{"index": "searchPerson -> getCoauthors", "prompt": "\nYour task is using searchPerson -> getCoauthors API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetCoauthors(person_id):\n    coauthors_list = [{'person_id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n---\nHere are some examples to follow:\n---\nQuery: Who are the collaborators of XXX at X institution?\nsearchPerson -> getCoauthors\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n---\nQuery: Who are the collaborators of XXX in X field?\nsearchPerson -> getCoauthors\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n---\nQuery: Who at X institution has a collaboration with XXX?\nsearchPerson -> getCoauthors\n--\norganization = 'X'\nname = 'XXX'\n\norg_person_list = searchPerson('organization' = organization)\norg_person_name_list = [person['name'] for person in org_person_list]\ncoauthors_name_list = []\nfor org_name in org_person_name_list:\n    search_person_list = searchPerson('name' = name)\n    search_person_info = search_person_list[0]\n    search_person_id = search_person_info['person_id']\n    coauthors_list = getCoauthors(person_id = search_person_id)\n    coauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n    if org_name in coauthors_name_list:\n        coauthors_name_list.append(org_name) \nfinal_result = coauthors_name_list\n---\nQuery: Who in X field has a collaboration with XXX?\nsearchPerson -> getCoauthors\n--\ninterest = 'X'\nname = 'XXX'\n\ninterest_person_list = searchPerson('interest' = interest)\ninterest_person_name_list = [person['name'] for person in interest_person_list]\ncoauthors_name_list = []\nfor interest_name in interest_person_name_list:\n    search_person_list = searchPerson('name' = name)\n    search_person_info = search_person_list[0]\n    search_person_id = search_person_info['person_id']\n    coauthors_list = getCoauthors(person_id = search_person_id)\n    coauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n    if interest_name in coauthors_name_list:\n        coauthors_name_list.append(interest_name) \nfinal_result = coauthors_name_list\n---"}
{"index": "searchPerson -> getPersonPubs", "prompt": "\nYour task is using searchPerson -> getPersonPubs API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetPersonPubs(person_id):\n    publication_list = [{'authors_name_list':list of str, 'pub_id':str, 'title':str, 'num_citation':int, 'year':str}]\n    return publication_list\n---\nHere are some examples to follow:\n---\nQuery: What are the papers published by XXX at X institution?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n---\nQuery: What is the citation count of the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# # Assuming the representative work is the one with the most citations\n# max_citation = max(publications_list, key=lambda x:x['num_citation'])\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n---\nQuery: In which year was the representative work of XXX at X institution published?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n---\nQuery: Who are the authors of the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nauthors_name_list = max_citation['authors_name_list']\nfinal_result = authors_name_list\n---\nQuery: What are the papers published by XXX in X field?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name=name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n---\nQuery: What is the citation count of the representative work of XXX in X field?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n---\nQuery: In which year was the representative work of XXX in X field published?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name=name, interest=interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nperson_pubs = getPersonPubs(person_id=target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = person_pubs[0]\npublication_year = target_publication_dict['year']\nfinal_result = publication_year\n---\nQuery: Who are the authors of the representative work of XXX in X field?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n---"}
{"index": "searchPerson -> getPersonBasicInfo", "prompt": "\nYour task is using searchPerson -> getPersonBasicInfo API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetPersonBasicInfo(person_id):\n    person_basic_info = {'person_id': str, 'name': str, 'gender': str, 'organization':str , 'position': str, 'bio': str, 'education_experience': str, 'email': str}\n    return person_basic_info\n---\nHere are some examples to follow:\n---\nQuery: Is XXX at X institution male or female?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n---\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n---\nQuery: What is the introduction of XXX at X institution?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n---\nQuery: What is the educational background of XXX at X institution?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\norganization = 'XX'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n---\nQuery: What is the email of XXX at X institution?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n---\nQuery: Is XXX in X field male or female?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n---\nQuery: What is the title / position of XXX in X field?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n---\nQuery: What is the introduction of XXX in X field?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n---\nQuery: What is the educational background of XXX in X field?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n---\nQuery: What is the email of XXX in X field?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n---"}
{"index": "searchPerson -> getCoauthors -> searchPerson", "prompt": "\nYour task is using searchPerson -> getCoauthors -> searchPerson API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetCoauthors(person_id):\n    coauthors_list = [{'person_id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n---\nHere are some examples to follow:\n---\nQuery: Who has the highest citation count among the collaborators of XXX at X institution?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\norganization = 'X'\n\n# get specific person's information\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n---\nQuery: Who has the most published papers among the collaborators of XXX at X institution?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\norganization = 'X'\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n---\nQuery: Who among the collaborators of XXX in XX field are at X institution?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\ninterest = 'XX'\ntarget_organization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_name = coauthor['name']\n    coauthor_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_list[0]\n    coauthor_organization = coauthor_info['organization']\n    if target_organization == target_organization:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n---\nQuery: Who has the highest citation count among the collaborators of XXX in X field?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\ninterest = 'X'\n\n# get specific person's information\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n---\nQuery: Who has the most published papers among the collaborators of XXX in X field?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\ninterest = 'X'\n\n# get specific person's information\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n---"}
{"index": "searchPerson -> getCoauthors -> getPersonInterest", "prompt": "\nYour task is using searchPerson -> getCoauthors -> getPersonInterest API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetCoauthors(person_id):\n    coauthors_list = [{'person_id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n--\ngetPersonInterest(person_id):\n    return interest_list\n---\nHere are some examples to follow:\n---\nQuery: Who among the collaborators of XXX at XX institution are researching in X field?\nsearchPerson -> getCoauthors -> getPersonInterest\n--\nname = 'XXX'\norganization = 'XX'\ntarget_interest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n---"}
{"index": "searchPerson -> getCoauthors -> getCoauthors", "prompt": "\nYour task is using searchPerson -> getCoauthors -> getCoauthors API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetCoauthors(person_id):\n    coauthors_list = [{'person_id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n---\nHere are some examples to follow:\n---\nQuery: Who are the collaborators of the collaborators of XXX at X institution?\nsearchPerson -> getCoauthors -> getCoauthors\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n---\nQuery: Who are the collaborators of the collaborators of XXX in X field?\nsearchPerson -> getCoauthors -> getCoauthors\n--\nname = 'XXX'\ninterest = 'X\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n---"}
{"index": "searchPerson -> getPersonPubs -> getPublication", "prompt": "\nYour task is using searchPerson -> getPersonPubs -> getPublication API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetPersonPubs(person_id):\n    publication_list = [{'authors_name_list':list of str, 'pub_id':str, 'title':str, 'num_citation':int, 'year':str}]\n    return publication_list\n--\ngetPublication(pub_id)\n    publication_info = {'abstract' : str, 'author_list': [{'person_id': str, 'name': str, 'orgaization': str}, {...}], 'num_citation': int}\n    return publication_info\n---\nHere are some examples to follow:\n---\nQuery: What is the abstract of the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n---\nQuery: What is the PDF link of the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result =target_pdf\n---\nQuery: Which journal or conference included the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'organization' = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n---\nQuery: What is the abstract of the representative work of XXX in X field?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n---\nQuery: What is the PDF link of the representative work of XXX in X field?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n---\nQuery: Which journal or conference included the representative work of XXX in X field?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson('name' = name)\nif len(person_list) > 1:\n    person_list = searchPerson('name' = name, 'interest' = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n---"}
{"index": "searhPerson", "prompt": "\nYour task is using searhPerson API to write the answer to the query.\nThe API is decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list \n---\nNote that you can only input one or more parameters from the candidates: name, organization or interest. Do not input any other parameters.\nHere are some examples to follow:\n---\nQuery: Research interests of XXX at X institution\nsearhPerson\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n---\nQuery: Citation count of XXX at X institution\nsearhPerson\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n---\nQuery: Number of published papers by XXX at X institution\nsearhPerson\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n---\nQuery: Which institution does XXX who researches in X field belong to?\nsearhPerson\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n---\nQuery: Citation count of XXX who researches in X field\nsearhPerson\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n---\nQuery: Number of papers published by XXX who researches in X field\nsearhPerson\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n---\nQuery: Who are the researchers at X institution?\nsearhPerson\n--\norganization = 'X'\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n---\nQuery: Who are the researchers in X field?\nsearhPerson\ninterest = 'X'\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n---"}
{"index": "searchPerson -> getCoauthors", "prompt": "\nYour task is using searchPerson -> getCoauthors API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetCoauthors(person_id):\n    coauthors_list = [{'person_id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n---\nHere are some examples to follow:\n---\nQuery: Who are the collaborators of XXX at X institution?\nsearchPerson -> getCoauthors\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n---\nQuery: Who are the collaborators of XXX in X field?\nsearchPerson -> getCoauthors\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n---\nQuery: Who at X institution has a collaboration with XXX?\nsearchPerson -> getCoauthors\n--\norganization = 'X'\nname = 'XXX'\n\norg_person_list = searchPerson(organization = organization)\norg_person_name_list = [person['name'] for person in org_person_list]\ncoauthors_name_list = []\nfor org_name in org_person_name_list:\n    search_person_list = searchPerson(name = name)\n    search_person_info = search_person_list[0]\n    search_person_id = search_person_info['person_id']\n    coauthors_list = getCoauthors(person_id = search_person_id)\n    coauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n    if org_name in coauthors_name_list:\n        coauthors_name_list.append(org_name) \nfinal_result = coauthors_name_list\n---\nQuery: Who in X field has a collaboration with XXX?\nsearchPerson -> getCoauthors\n--\ninterest = 'X'\nname = 'XXX'\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_name_list = [person['name'] for person in interest_person_list]\ncoauthors_name_list = []\nfor interest_name in interest_person_name_list:\n    search_person_list = searchPerson(name = name)\n    search_person_info = search_person_list[0]\n    search_person_id = search_person_info['person_id']\n    coauthors_list = getCoauthors(person_id = search_person_id)\n    coauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n    if interest_name in coauthors_name_list:\n        coauthors_name_list.append(interest_name) \nfinal_result = coauthors_name_list\n---"}
{"index": "searchPerson -> getPersonPubs", "prompt": "\nYour task is using searchPerson -> getPersonPubs API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetPersonPubs(person_id):\n    publication_list = [{'authors_name_list':list of str, 'pub_id':str, 'title':str, 'num_citation':int, 'year':str}]\n    return publication_list\n---\nHere are some examples to follow:\n---\nQuery: What are the papers published by XXX at X institution?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n---\nQuery: What is the citation count of the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# # Assuming the representative work is the one with the most citations\n# max_citation = max(publications_list, key=lambda x:x['num_citation'])\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n---\nQuery: In which year was the representative work of XXX at X institution published?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n---\nQuery: Who are the authors of the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nauthors_name_list = max_citation['authors_name_list']\nfinal_result = authors_name_list\n---\nQuery: What are the papers published by XXX in X field?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n---\nQuery: What is the citation count of the representative work of XXX in X field?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n---\nQuery: In which year was the representative work of XXX in X field published?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name=name, interest=interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nperson_pubs = getPersonPubs(person_id=target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = person_pubs[0]\npublication_year = target_publication_dict['year']\nfinal_result = publication_year\n---\nQuery: Who are the authors of the representative work of XXX in X field?\nsearchPerson -> getPersonPubs\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n---"}
{"index": "searchPerson -> getPersonBasicInfo", "prompt": "\nYour task is using searchPerson -> getPersonBasicInfo API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetPersonBasicInfo(person_id):\n    person_basic_info = {'person_id': str, 'name': str, 'gender': str, 'organization':str , 'position': str, 'bio': str, 'education_experience': str, 'email': str}\n    return person_basic_info\n---\nHere are some examples to follow:\n---\nQuery: Is XXX at X institution male or female?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n---\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n---\nQuery: What is the introduction of XXX at X institution?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n---\nQuery: What is the educational background of XXX at X institution?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\norganization = 'XX'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n---\nQuery: What is the email of XXX at X institution?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n---\nQuery: Is XXX in X field male or female?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n---\nQuery: What is the title / position of XXX in X field?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n---\nQuery: What is the introduction of XXX in X field?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n---\nQuery: What is the educational background of XXX in X field?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n---\nQuery: What is the email of XXX in X field?\nsearchPerson -> getPersonBasicInfo\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n---"}
{"index": "searchPerson -> getCoauthors -> searchPerson", "prompt": "\nYour task is using searchPerson -> getCoauthors -> searchPerson API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetCoauthors(person_id):\n    coauthors_list = [{'person_id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n---\nHere are some examples to follow:\n---\nQuery: Who has the highest citation count among the collaborators of XXX at X institution?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\norganization = 'X'\n\n# get specific person's information\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n---\nQuery: Who has the most published papers among the collaborators of XXX at X institution?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\norganization = 'X'\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n---\nQuery: Who among the collaborators of XXX in XX field are at X institution?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\ninterest = 'XX'\ntarget_organization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_name = coauthor['name']\n    coauthor_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_list[0]\n    coauthor_organization = coauthor_info['organization']\n    if target_organization == target_organization:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n---\nQuery: Who has the highest citation count among the collaborators of XXX in X field?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\ninterest = 'X'\n\n# get specific person's information\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n---\nQuery: Who has the most published papers among the collaborators of XXX in X field?\nsearchPerson -> getCoauthors -> searchPerson\n--\nname = 'XXX'\ninterest = 'X'\n\n# get specific person's information\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n---"}
{"index": "searchPerson -> getCoauthors -> getPersonInterest", "prompt": "\nYour task is using searchPerson -> getCoauthors -> getPersonInterest API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetCoauthors(person_id):\n    coauthors_list = [{'person_id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n--\ngetPersonInterest(person_id):\n    return interest_list\n---\nHere are some examples to follow:\n---\nQuery: Who among the collaborators of XXX at XX institution are researching in X field?\nsearchPerson -> getCoauthors -> getPersonInterest\n--\nname = 'XXX'\norganization = 'XX'\ntarget_interest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n---"}
{"index": "searchPerson -> getCoauthors -> getCoauthors", "prompt": "\nYour task is using searchPerson -> getCoauthors -> getCoauthors API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetCoauthors(person_id):\n    coauthors_list = [{'person_id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n---\nHere are some examples to follow:\n---\nQuery: Who are the collaborators of the collaborators of XXX at X institution?\nsearchPerson -> getCoauthors -> getCoauthors\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n---\nQuery: Who are the collaborators of the collaborators of XXX in X field?\nsearchPerson -> getCoauthors -> getCoauthors\n--\nname = 'XXX'\ninterest = 'X\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n---"}
{"index": "searchPerson -> getPersonPubs -> getPublication", "prompt": "\nYour task is using searchPerson -> getPersonPubs -> getPublication API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n--\ngetPersonPubs(person_id):\n    publication_list = [{'authors_name_list':list of str, 'pub_id':str, 'title':str, 'num_citation':int, 'year':str}]\n    return publication_list\n--\ngetPublication(pub_id)\n    publication_info = {'abstract' : str, 'author_list': [{'person_id': str, 'name': str, 'orgaization': str}, {...}], 'num_citation': int}\n    return publication_info\n---\nHere are some examples to follow:\n---\nQuery: What is the abstract of the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n---\nQuery: What is the PDF link of the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result =target_pdf\n---\nQuery: Which journal or conference included the representative work of XXX at X institution?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\norganization = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n---\nQuery: What is the abstract of the representative work of XXX in X field?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n---\nQuery: What is the PDF link of the representative work of XXX in X field?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n---\nQuery: Which journal or conference included the representative work of XXX in X field?\nsearchPerson -> getPersonPubs -> getPublication\n--\nname = 'XXX'\ninterest = 'X'\n\nperson_list = searchPerson(name = name)\nif len(person_list) > 1:\n    person_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n---"}
{"index": "parser", "prompt": "\nHere are some tool functions you can use. Each function returns a dict or a list of dict.\n------\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interests':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list\n---\nsearchPublication(publication_info)\n    publication_list = [{'pub_id': str, 'title': str, 'year': time}, {...}]\n    return publication_list\n---\ngetCoauthors(person_id):\n    coauthors_list = [{'person_id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n---\ngetPersonInterest(person_id):\n    return interest_list\n---\ngetPersonPubs(person_id):\n    publication_list = [{'authors_name_list':list of str, 'pub_id':str, 'title':str, 'num_citation':int, 'year':str}]\n    return publication_list\n---\ngetPersonBasicInfo(person_id):\n    person_basic_info = {'person_id': str, 'name': str, 'gender': str, 'organization':str , 'position': str, 'bio': str, 'education_experience': str, 'email': str}\n    return person_basic_info\n---\ngetPublication(pub_id)\n    publication_info = {'abstract' : str, 'author_list': [{'person_id': str, 'name': str, 'organization': str}, {...}], 'num_citation': int, 'year' : int, 'pdf_link': str, 'venue' : str}\n    return publication_info\n------\nYou are given a query. Break the query down into a combination of the python execution processes in order to solve it. \nNote that the result must be one of these combination candidates:\nsearhPerson\nsearchPublication\nsearchPerson -> getCoauthors\nsearchPerson -> getPublication\nsearchPerson -> getPersonBasicInfo\nsearchPublication -> getPublication\nsearchPerson -> getCoauthors -> searchPerson\nsearchPerson -> getCoauthors -> getCoauthors\nsearchPerson -> getCoauthors -> getPersonInterest\nsearchPerson -> getPersonPubs -> getPublication\nsearchPublication -> getPublication -> getPersonInterest\nsearchPublication -> getPublication -> getCoauthors\nsearchPublication -> getPublication -> getPersonPubs\nsearchPublication -> getPublication -> getPersonBasicInfo\nsearchPublication -> getPublication -> searchPerson\n------\nQuery: Research interests of XXX at X institution\nsearhPerson\n---\nQuery: Citation count of XXX at X institution\nsearhPerson\n---\nQuery: Number of published papers by XXX at X institution\nsearhPerson\n---\nQuery: Which institution does XXX who researches in X field belong to?\nsearhPerson\n---\nQuery: Citation count of XXX who researches in X field\nsearhPerson\n---\nQuery: Number of papers published by XXX who researches in X field\nsearhPerson\n---\nQuery: Who are the researchers at X institution?\nsearhPerson\n---\nQuery: Who are the researchers in X field?\nsearhPerson\n---\nQuery: Who are the collaborators of XXX at X institution?\nSolution: searchPerson -> getCoauthors\n---\nQuery: Who are the collaborators of XXX in X field?\nSolution: searchPerson -> getCoauthors\n---\nQuery: Who at X institution has a collaboration with X?\nSolution: searchPerson -> getCoauthors\n---\nQuery: Who in X field has a collaboration with X?\nSolution: searchPerson -> getCoauthors\n---\nQuery: What are the papers published by XXX at X institution?\nSolution: searchPerson -> getPersonPubs\n---\nQuery: What is the citation count of the representative work of XXX at X institution?\nSolution: searchPerson -> getPersonPubs\n---\nQuery: In which year was the representative work of XXX at X institution published?\nSolution: searchPerson -> getPersonPubs\n---\nQuery: Who are the authors of the representative work of XXX at X institution?\nSolution: searchPerson -> getPersonPubs\n---\nQuery: What are the papers published by XXX in X field?\nSolution: searchPerson -> getPersonPubs\n---\nQuery: What is the citation count of the representative work of XXX in X field?\nSolution: searchPerson -> getPersonPubs\n---\nQuery: In which year was the representative work of XXX in X field published?\nSolution: searchPerson -> getPersonPubs\n---\nQuery: Who are the authors of the representative work of XXX in X field?\nSolution: searchPerson -> getPersonPubs\n---\nQuery: Is XXX at X institution male or female?\nSolution: searchPerson -> getPersonBasicInfo\n---\nQuery: What is the position of XXX at X institution?\nSolution: searchPerson -> getPersonBasicInfo\n---\nQuery: What is the introduction of XXX at X institution?\nSolution: searchPerson -> getPersonBasicInfo\n---\nQuery: What is the educational background of XXX at X institution?\nSolution: searchPerson -> getPersonBasicInfo\n---\nQuery: What is the email of XXX at X institution?\nSolution: earchPerson -> getPersonBasicInfo\n---\nQuery: Is XXX in X field male or female?\nSolution: searchPerson -> getPersonBasicInfo\n---\nQuery: What is the title of XXX in X field?\nSolution: searchPerson -> getPersonBasicInfo\n---\nQuery: What is the introduction of XXX in X field?\nSolution: searchPerson -> getPersonBasicInfo\n---\nQuery: What is the educational background of XXX in X field?\nSolution: searchPerson -> getPersonBasicInfo\n---\nQuery: What is the email of XXX in X field?\nSolution: searchPerson -> getPersonBasicInfo\n---\nQuery: Who among the collaborators of XXX at XX institution are researching in X field?\nSolution: searchPerson -> getCoauthors -> getPersonInterest\n---\nQuery: Who has the highest citation count among the collaborators of XXX at X institution?\nSolution: searchPerson -> getCoauthors -> searchPerson\n---\nQuery: Who has the most published papers among the collaborators of XXX at X institution?\nSolution: searchPerson -> getCoauthors -> searchPerson\n---\nQuery: Who among the collaborators of XXX in XX field are at X institution?\nSolution: searchPerson -> getCoauthors -> searchPerson\n---\nQuery: Who has the highest citation count among the collaborators of XXX in X field?\nSolution: searchPerson -> getCoauthors -> searchPerson\n---\nQuery: Who has the most published papers among the collaborators of XXX in X field?\nSolution: searchPerson -> getCoauthors -> searchPerson\n---\nQuery: Who are the collaborators of the collaborators of XXX at X institution?\nSolution: searchPerson -> getCoauthors -> getCoauthors\n---\nQuery: Who are the collaborators of the collaborators of XXX in X field?\nSolution: searchPerson -> getCoauthors -> getCoauthors\n---\nQuery: What is the abstract of the representative work of XXX at X institution?\nSolution: searchPerson -> getPersonPubs -> getPublication\n---\nQuery: What is the PDF link of the representative work of XXX at X institution?\nSolution: searchPerson -> getPersonPubs -> getPublication\n---\nQuery: Which journal or conference included the representative work of XXX at X institution?\nSolution: searchPerson -> getPersonPubs -> getPublication\n---\nQuery: What is the abstract of the representative work of XXX in X field?\nSolution: searchPerson -> getPersonPubs -> getPublication\n---\nQuery: What is the PDF link of the representative work of XXX in X field?\nSolution: searchPerson -> getPersonPubs -> getPublication\n---\nQuery: Which journal or conference included the representative work of XXX in X field?\nSolution: searchPerson -> getPersonPubs -> getPublication\n---"}
{"index": "searchPublication", "prompt": "\nYour task is using searchPublication API to write the answer to the query.\nThe API is decribed below:\n---\nsearchPublication(publication_info)\n    publication_list = [{'pub_id': str, 'title': str, 'year': time}, {...}]\n    return publication_list\n---\nHere are some examples to follow:\n---\nQuery: Which papers have been published in the field of X?\nsearchPublication\n--\ninterest = 'X'\n\npublication_list = searchPublication(publication_info = interest)\ntitle_list = [publication['title'] for publication in publication_list]\nfinal_result = title_list\n---\nQuery: Which papers have been published in the field of X in the recent n years?\nsearchPublication\n--\ninterest = 'X'\nyear_n = n\n\npublication_list = searchPublication(publication_info = interest)\nearlist_year = 2023 - year_n\ntarget_pub_list = []\nfor publication in publication_list:\n    if int(publication['year'] >= earlist_year):\n        target_pub_list.append(publication)\ntitle_list = [publication['title'] for publication in target_pub_list]\nfinal_result = title_list\n---"}
{"index": "searchPublication -> getPublication", "prompt": "\nYour task is using searchPublication -> getPublication API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPublication(publication_info)\n    publication_list = [{'pub_id': str, 'title': str, 'year': time}, {...}]\n    return publication_list\n--\ngetPublication(pub_id)\n    publication_info = {'abstract' : str, 'author_list': [{'person_id': str, 'name': str, 'orgaization': str}, {...}], 'num_citation': int}\n    return publication_info\n---\nHere are some examples to follow:\n---\nQuery: What is the abstract of XXX?\nsearchPublication -> getPublication\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n---\nQuery: Where can I find the PDF of XXX?\nsearchPublication -> getPublication\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication = publication_list[0]\npub_id = target_publication['pub_id']\n\npublication_info = getPublication(pub_id)\npdf_link = publication_info['pdf_link']\nfinal_result = pdf_link\n---\nQuery: Where has XXX been indexed?\nsearchPublication -> getPublication\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\n\npublication_info = getPublication(pub_id = target_publication_id)\nvenue = publication_info['venue']\nfinal_result = venue\n---\nQuery: How many times has XXX been cited?\nsearchPublication -> getPublication\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication = publication_list[0]\ntarget_publication_id = target_publication['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_num_citation = target_publication_info['num_citation']\nfinal_result = target_num_citation\n---\nQuery: When was XXX published?\nsearchPublication -> getPublication\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\npublication_id = target_publication_info['pub_id']\ntarget_publication_info = getPublication(pub_id = publication_id)\n\npublication_year = target_publication_info['year']\nfinal_result = publication_year\n---\nQuery: Who are the authors of XXX?\nsearchPublication -> getPublication\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\npublication_info = getPublication(pub_id = target_publication_id)\nauthors = publication_info['author_list']\nauthors_list = []\nfor author in authors:\n    authors_list.append(author['name'])\nfinal_result = authors_list\n---"}
{"index": "searchPublication -> getPublication -> searchPerson", "prompt": "\nYour task is using searchPublication -> getPublication -> searchPerson API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPublication(publication_info)\n    publication_list = [{'pub_id': str, 'title': str, 'year': time}, {...}]\n    return publication_list\n--\ngetPublication(pub_id)\n    publication_info = {'abstract' : str, 'author_list': [{'person_id': str, 'name': str, 'orgaization': str}, {...}], 'num_citation': int}\n    return publication_info\n--\nsearchPerson(name, organization, interest):\n    person_list = [{'person_id': str, 'name': str, 'num_citation': int, 'interest':list of str, 'num_pubs': int, 'organization': str}, {...}]\n    return person_list \n---\nHere are some examples to follow:\n---\nQuery: What is the research direction of the first author of XXX?\nsearchPublication -> getPublication -> searchPerson\n--\ntitle = info['title']\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\npublication_info = getPublication(pub_id = target_publication_id)\nfirst_author_id = publication_info['author_list'][0]['person_id']\n\nperson_interest_list = getPersonInterest(person_id = first_author_id)\nfinal_result = person_interest_list\n---\nQuery: Which authors of XXX are interested in X?\nsearchPublication -> getPublication -> searchPerson\n--\ntitle = 'XXX'\ninterest = 'X'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\ntarget_publication_details = getPublication(pub_id = target_publication_id)\ntarget_name_list = []\n\nfor author in target_publication_details['author_list']:\n    target_person_id = author['person_id']\n    target_person_interest_list = getPersonInterest(person_id = target_person_id)\n    if interest in target_person_interest_list:\n        target_name_list.append(author['name'])\n\nfinal_result = target_name_list\n---\nQuery: How many times has the first author of XXX been cited?\nsearchPublication -> getPublication -> searchPerson\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\nauthor_person_id = target_publication_info['author_list'][0]['person_id']\n\nperson_list = searchPerson(name = author_person_id)\ntarget_person_info = person_list[0]\nauthor_num_citation = target_person_info['num_citation']\n\nfinal_result = author_num_citation\n---\nQuery: How many papers has the first author of XXX published?\nsearchPublication -> getPublication -> searchPerson\n--\ntitle = 'X'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\nfirst_author_id = target_publication_info['author_list'][0]['person_id']\n\nfirst_author_person_info = searchPerson(person_id = first_author_id)[0]\nnum_publication = first_author_person_info['num_pubs']\n\nfinal_result = num_publication\n---\nQuery: Which academic institution does the first author of XXX belong to?\nsearchPublication -> getPublication -> searchPerson\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_pub_id = target_publication_info['pub_id']\n\npublicaion_info = getPublication(pub_id = target_pub_id)\nfirst_author_id = publicaion_info['author_list'][0]['person_id']\n\nperson_info = searchPerson(name=first_author_id)\ntarget_organization = person_info[0]['organization']\nfinal_result = target_organization\n---"}
{"index": "searchPublication -> getPublication -> getCoauthors", "prompt": "\nYour task is using searchPublication -> getPublication -> getCoauthors API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPublication(publication_info)\n    publication_list = [{'pub_id': str, 'title': str, 'year': time}, {...}]\n    return publication_list\n--\ngetPublication(pub_id)\n    publication_info = {'abstract' : str, 'author_list': [{'person_id': str, 'name': str, 'orgaization': str}, {...}], 'num_citation': int}\n    return publication_info\n--\ngetCoauthors(person_id):\n    coauthors_list = [{'id': str, 'name': str, 'relation': ['advisor' or 'advisee' or 'coauthor']}, {...}]\n    return coauthors_list\n---\nHere are some examples to follow:\n---\nQuery: Who are the collaborators of the first author of XXX?\nsearchPublication -> getPublication -> getCoauthors\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\ntarget_publication_detail = getPublication(pub_id = target_publication_id)\nfirst_author_id = target_publication_detail['author_list'][0]['person_id']\ncoauthors_list = getCoauthors(person_id = first_author_id)\ncoauthors_name_list = [coauthors_list[i]['name'] for i in range(len(coauthors_list))]\nfinal_result = coauthors_name_list\n---"}
{"index": "searchPublication -> getPublication -> getPersonPubs", "prompt": "\nYour task is using searchPublication -> getPublication -> getPersonPubs API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPublication(publication_info)\n    publication_list = [{'pub_id': str, 'title': str, 'year': time}, {...}]\n    return publication_list\n--\ngetPublication(pub_id)\n    publication_info = {'abstract' : str, 'author_list': [{'person_id': str, 'name': str, 'orgaization': str}, {...}], 'num_citation': int}\n    return publication_info\n--\ngetPersonPubs(person_id):\n    publication_list = [{'authors_name_list':list of str, 'pub_id':str, 'title':str, 'num_citation':int, 'year':str}]\n    return publication_list\n---\nHere are some examples to follow:\n---\nQuery: What are the representative works of the first author of XXX?\nsearchPublication -> getPublication -> getPersonPubs\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\npublication_info = getPublication(pub_id = target_publication_id)\nfirst_author_info = publication_info['author_list'][0]\nfirst_author_id = first_author_info['person_id']\nauthor_publications = getPersonPubs(person_id = first_author_id)\n\ntitle_list = [author_publications[i]['title'] for i in range(len(author_publications))]\nfinal_result = title_list\n---\nQuery: How many times has the representative work of the first author of XXX been cited?\nsearchPublication -> getPublication -> getPersonPubs\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication = publication_list[0]\npub_id = target_publication['pub_id']\npublication_info = getPublication(pub_id = pub_id)\nfirst_author = publication_info['author_list'][0]\nfirst_author_id = first_author['person_id']\nfirst_author_pubs = getPersonPubs(person_id = first_author_id)\nmain_pub = first_author_pubs[0]\nnum_citation = main_pub['num_citation']\n\nfinal_result = num_citation\n---\nQuery: When was the representative work of the first author of XXX published?\nsearchPublication -> getPublication -> getPersonPubs\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication = publication_list[0]\npub_id = target_publication['pub_id']\npublication_info = getPublication(pub_id = pub_id)\nfirst_author = publication_info['author_list'][0]\nfirst_author_id = first_author['person_id']\nfirst_author_pubs = getPersonPubs(person_id = first_author_id)\nmain_pub = first_author_pubs[0]\nnum_citation = main_pub['num_citation']\n\nfinal_result = num_citation\n---\nQuery: Who are the authors of the representative work of the first author of XXX?\nsearchPublication -> getPublication -> getPersonPubs\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\npublication_info = getPublication(pub_id = target_publication_id)\n\nfirst_author_id = publication_info['author_list'][0]['person_id']\nfirst_author_pubs = getPersonPubs(person_id = first_author_id)\n\nauthors_name_lists = [pub['authors_name_list'] for pub in first_author_pubs]\nfinal_result = authors_name_lists\n---"}
{"index": "searchPublication -> getPublication -> getPersonBasicInfo", "prompt": "\nYour task is using searchPublication -> getPublication -> getPersonBasicInfo API combination to write the answer to the query.\nThe mentioned APIs are decribed below:\n---\nsearchPublication(publication_info)\n    publication_list = [{'pub_id': str, 'title': str, 'year': time}, {...}]\n    return publication_list\n--\ngetPublication(pub_id)\n    publication_info = {'abstract' : str, 'author_list': [{'person_id': str, 'name': str, 'orgaization': str}, {...}], 'num_citation': int}\n    return publication_info\n--\ngetPersonBasicInfo(person_id):\n    person_basic_info = {'person_id': str, 'name': str, 'gender': str, 'organization':str , 'position': str, 'bio': str, 'education_experience': str, 'email': str}\n    return person_basic_info\n---\nHere are some examples to follow:\n---\nQuery: What is the gender of the first author of XXX?\nsearchPublication -> getPublication -> getPersonBasicInfo\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info=title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\n\npublication_info = getPublication(pub_id=target_publication_id)\nauthor_list = publication_info['author_list']\nfirst_author_id = author_list[0]['person_id']\n\nfirst_author_basic_info = getPersonBasicInfo(person_id=first_author_id)\nfirst_author_gender = first_author_basic_info['gender']\nfinal_result = first_author_gender\n---\nQuery: What is the title of the first author of XXX?\nsearchPublication -> getPublication -> getPersonBasicInfo\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_person_info = target_publication_info['author_list'][0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n---\nQuery: What is the profile of the first author of XXX?\nsearchPublication -> getPublication -> getPersonBasicInfo\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\nfirst_author_info = target_publication_info['author_list'][0]\nfirst_author_id = first_author_info['person_id']\nfirst_author_basic_info = getPersonBasicInfo(person_id = first_author_id)\nfirst_author_bio = first_author_basic_info['bio']\nfinal_result = first_author_bio\n---\nQuery: Which school did the first author of XXX graduate from?\nsearchPublication -> getPublication -> getPersonBasicInfo\n--\ntitle = info['title']\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication_info = publication_list[0]\ntarget_publication_id = target_publication_info['pub_id']\ntarget_publication_full_info = getPublication(pub_id = target_publication_id)\nfirst_author_info = target_publication_full_info['author_list'][0]\nfirst_author_id = first_author_info['person_id']\n\nfirst_author_basic_info = getPersonBasicInfo(person_id = first_author_id)\nfirst_author_education_experience = first_author_basic_info['education_experience']\n\nfinal_result = first_author_education_experience\n---\nQuery: What is the email of the first author of XXX?\nsearchPublication -> getPublication -> getPersonBasicInfo\n--\ntitle = 'XXX'\n\npublication_list = searchPublication(publication_info = title)\ntarget_publication = publication_list[0]\ntarget_publication_id = target_publication['pub_id']\n\npublication_info = getPublication(pub_id = target_publication_id)\nfirst_author_id = publication_info['author_list'][0]['person_id']\n\nfirst_author_basic_info = getPersonBasicInfo(person_id = first_author_id)\nfirst_author_email = first_author_basic_info['email']\n\nfinal_result = first_author_email\n---"}
{"index": "nl", "prompt": "\nYou are an academic assistant named SoAy x AMiner, based on a large-scale pre-trained language model. You can answer academic-related questions based on AMiner database. \nYour task is to generate a natural language [Answer] base on the [Query] and [Result]. note that answers should be polite, objective, and neutral.\nif the [Result] is 'exe wrong', please apologize to the users politely.\nHere are some examples:\n---\nQuery:\nHow many citations dose XXX of X have?\nResult:\nnnn\nAnswer:\nX's XXX has nnn citations according to information from AMiner.\n---\nQuery:\nWhich is XXX's representative work?\nResult:\nWWWWWWWWWWWW\nAnswer:\nXXX's representative work is WWWWWWWWWWWW.\n---\nQuery:\nDo XXX and XXXX graduate from the same school?\nResult:\nexec error\nAnswer:\nsorry, I'm not able to answer this question due to the missing information. Please contact us by clicking 'Do Let Us Know' link below. Your comment let us do better!\n---"}